### YamlMime:ManagedReference
items:
- uid: Scheduler.SchedulerFactory
  commentId: T:Scheduler.SchedulerFactory
  id: SchedulerFactory
  parent: Scheduler
  children:
  - Scheduler.SchedulerFactory.#ctor(Microsoft.Extensions.Logging.ILogger{Scheduler.ISchedulerFactory})
  - Scheduler.SchedulerFactory.Create
  - Scheduler.SchedulerFactory.Do(System.Func{Scheduler.IMessage,Scheduler.IMessage})
  - Scheduler.SchedulerFactory.Start(Scheduler.IMessage)
  langs:
  - csharp
  - vb
  name: SchedulerFactory
  nameWithType: SchedulerFactory
  fullName: Scheduler.SchedulerFactory
  type: Class
  source:
    id: SchedulerFactory
    path: C:\Users\user\source\repos\NewRepo4\AviaTickets\Scheduler\Scheduler\SchedulerFactory.cs
    startLine: 10
  assemblies:
  - Scheduler
  namespace: Scheduler
  summary: "\nПланировщик заданий\n"
  example: []
  syntax:
    content: 'public class SchedulerFactory : ISchedulerFactory'
    content.vb: >-
      Public Class SchedulerFactory
          Implements ISchedulerFactory
  inheritance:
  - System.Object
  implements:
  - Scheduler.ISchedulerFactory
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Scheduler.SchedulerFactory.#ctor(Microsoft.Extensions.Logging.ILogger{Scheduler.ISchedulerFactory})
  commentId: M:Scheduler.SchedulerFactory.#ctor(Microsoft.Extensions.Logging.ILogger{Scheduler.ISchedulerFactory})
  id: '#ctor(Microsoft.Extensions.Logging.ILogger{Scheduler.ISchedulerFactory})'
  parent: Scheduler.SchedulerFactory
  langs:
  - csharp
  - vb
  name: SchedulerFactory(ILogger<ISchedulerFactory>)
  nameWithType: SchedulerFactory.SchedulerFactory(ILogger<ISchedulerFactory>)
  fullName: Scheduler.SchedulerFactory.SchedulerFactory(Microsoft.Extensions.Logging.ILogger<Scheduler.ISchedulerFactory>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\user\source\repos\NewRepo4\AviaTickets\Scheduler\Scheduler\SchedulerFactory.cs
    startLine: 23
  assemblies:
  - Scheduler
  namespace: Scheduler
  summary: "\nКонструктор планировщика\n"
  example: []
  syntax:
    content: public SchedulerFactory(ILogger<ISchedulerFactory> logger)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Scheduler.ISchedulerFactory}
      description: Логгер
    content.vb: Public Sub New(logger As ILogger(Of ISchedulerFactory))
  overload: Scheduler.SchedulerFactory.#ctor*
  nameWithType.vb: SchedulerFactory.SchedulerFactory(ILogger(Of ISchedulerFactory))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Scheduler.SchedulerFactory.SchedulerFactory(Microsoft.Extensions.Logging.ILogger(Of Scheduler.ISchedulerFactory))
  name.vb: SchedulerFactory(ILogger(Of ISchedulerFactory))
- uid: Scheduler.SchedulerFactory.Create
  commentId: M:Scheduler.SchedulerFactory.Create
  id: Create
  parent: Scheduler.SchedulerFactory
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: SchedulerFactory.Create()
  fullName: Scheduler.SchedulerFactory.Create()
  type: Method
  source:
    id: Create
    path: C:\Users\user\source\repos\NewRepo4\AviaTickets\Scheduler\Scheduler\SchedulerFactory.cs
    startLine: 33
  assemblies:
  - Scheduler
  namespace: Scheduler
  summary: "\nСоздание списка задач\n"
  example: []
  syntax:
    content: public ISchedulerFactory Create()
    return:
      type: Scheduler.ISchedulerFactory
      description: Текущий планировщик заданий
    content.vb: Public Function Create As ISchedulerFactory
  overload: Scheduler.SchedulerFactory.Create*
  implements:
  - Scheduler.ISchedulerFactory.Create
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Scheduler.SchedulerFactory.Do(System.Func{Scheduler.IMessage,Scheduler.IMessage})
  commentId: M:Scheduler.SchedulerFactory.Do(System.Func{Scheduler.IMessage,Scheduler.IMessage})
  id: Do(System.Func{Scheduler.IMessage,Scheduler.IMessage})
  parent: Scheduler.SchedulerFactory
  langs:
  - csharp
  - vb
  name: Do(Func<IMessage, IMessage>)
  nameWithType: SchedulerFactory.Do(Func<IMessage, IMessage>)
  fullName: Scheduler.SchedulerFactory.Do(System.Func<Scheduler.IMessage, Scheduler.IMessage>)
  type: Method
  source:
    id: Do
    path: C:\Users\user\source\repos\NewRepo4\AviaTickets\Scheduler\Scheduler\SchedulerFactory.cs
    startLine: 50
  assemblies:
  - Scheduler
  namespace: Scheduler
  summary: "\nДобавление задачи в планировщик (список задач)\n"
  example: []
  syntax:
    content: public ISchedulerFactory Do(Func<IMessage, IMessage> subprocess)
    parameters:
    - id: subprocess
      type: System.Func{Scheduler.IMessage,Scheduler.IMessage}
      description: Задача (должна принимать и возвращать IMessage)
    return:
      type: Scheduler.ISchedulerFactory
      description: Текущий планировщик заданий
    content.vb: Public Function Do(subprocess As Func(Of IMessage, IMessage)) As ISchedulerFactory
  overload: Scheduler.SchedulerFactory.Do*
  implements:
  - Scheduler.ISchedulerFactory.Do(System.Func{Scheduler.IMessage,Scheduler.IMessage})
  nameWithType.vb: SchedulerFactory.Do(Func(Of IMessage, IMessage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Scheduler.SchedulerFactory.Do(System.Func(Of Scheduler.IMessage, Scheduler.IMessage))
  name.vb: Do(Func(Of IMessage, IMessage))
- uid: Scheduler.SchedulerFactory.Start(Scheduler.IMessage)
  commentId: M:Scheduler.SchedulerFactory.Start(Scheduler.IMessage)
  id: Start(Scheduler.IMessage)
  parent: Scheduler.SchedulerFactory
  langs:
  - csharp
  - vb
  name: Start(IMessage)
  nameWithType: SchedulerFactory.Start(IMessage)
  fullName: Scheduler.SchedulerFactory.Start(Scheduler.IMessage)
  type: Method
  source:
    id: Start
    path: C:\Users\user\source\repos\NewRepo4\AviaTickets\Scheduler\Scheduler\SchedulerFactory.cs
    startLine: 71
  assemblies:
  - Scheduler
  namespace: Scheduler
  summary: "\nЗапуск выполнения очереди задач\n"
  example: []
  syntax:
    content: public IMessage Start(IMessage msg = null)
    parameters:
    - id: msg
      type: Scheduler.IMessage
      description: Сообщение с данными для первой задачи планировщика
    return:
      type: Scheduler.IMessage
      description: Сообщение с данными от последнего элемента планировщика
    content.vb: Public Function Start(msg As IMessage = Nothing) As IMessage
  overload: Scheduler.SchedulerFactory.Start*
  implements:
  - Scheduler.ISchedulerFactory.Start(Scheduler.IMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Scheduler
  commentId: N:Scheduler
  name: Scheduler
  nameWithType: Scheduler
  fullName: Scheduler
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Scheduler.ISchedulerFactory
  commentId: T:Scheduler.ISchedulerFactory
  parent: Scheduler
  name: ISchedulerFactory
  nameWithType: ISchedulerFactory
  fullName: Scheduler.ISchedulerFactory
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Scheduler.SchedulerFactory.#ctor*
  commentId: Overload:Scheduler.SchedulerFactory.#ctor
  name: SchedulerFactory
  nameWithType: SchedulerFactory.SchedulerFactory
  fullName: Scheduler.SchedulerFactory.SchedulerFactory
- uid: Microsoft.Extensions.Logging.ILogger{Scheduler.ISchedulerFactory}
  commentId: T:Microsoft.Extensions.Logging.ILogger{Scheduler.ISchedulerFactory}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<ISchedulerFactory>
  nameWithType: ILogger<ISchedulerFactory>
  fullName: Microsoft.Extensions.Logging.ILogger<Scheduler.ISchedulerFactory>
  nameWithType.vb: ILogger(Of ISchedulerFactory)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of Scheduler.ISchedulerFactory)
  name.vb: ILogger(Of ISchedulerFactory)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Scheduler.ISchedulerFactory
    name: ISchedulerFactory
    nameWithType: ISchedulerFactory
    fullName: Scheduler.ISchedulerFactory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Scheduler.ISchedulerFactory
    name: ISchedulerFactory
    nameWithType: ISchedulerFactory
    fullName: Scheduler.ISchedulerFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Scheduler.SchedulerFactory.Create*
  commentId: Overload:Scheduler.SchedulerFactory.Create
  name: Create
  nameWithType: SchedulerFactory.Create
  fullName: Scheduler.SchedulerFactory.Create
- uid: Scheduler.ISchedulerFactory.Create
  commentId: M:Scheduler.ISchedulerFactory.Create
  parent: Scheduler.ISchedulerFactory
  name: Create()
  nameWithType: ISchedulerFactory.Create()
  fullName: Scheduler.ISchedulerFactory.Create()
  spec.csharp:
  - uid: Scheduler.ISchedulerFactory.Create
    name: Create
    nameWithType: ISchedulerFactory.Create
    fullName: Scheduler.ISchedulerFactory.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Scheduler.ISchedulerFactory.Create
    name: Create
    nameWithType: ISchedulerFactory.Create
    fullName: Scheduler.ISchedulerFactory.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Scheduler.SchedulerFactory.Do*
  commentId: Overload:Scheduler.SchedulerFactory.Do
  name: Do
  nameWithType: SchedulerFactory.Do
  fullName: Scheduler.SchedulerFactory.Do
- uid: Scheduler.ISchedulerFactory.Do(System.Func{Scheduler.IMessage,Scheduler.IMessage})
  commentId: M:Scheduler.ISchedulerFactory.Do(System.Func{Scheduler.IMessage,Scheduler.IMessage})
  parent: Scheduler.ISchedulerFactory
  isExternal: true
  name: Do(Func<IMessage, IMessage>)
  nameWithType: ISchedulerFactory.Do(Func<IMessage, IMessage>)
  fullName: Scheduler.ISchedulerFactory.Do(System.Func<Scheduler.IMessage, Scheduler.IMessage>)
  nameWithType.vb: ISchedulerFactory.Do(Func(Of IMessage, IMessage))
  fullName.vb: Scheduler.ISchedulerFactory.Do(System.Func(Of Scheduler.IMessage, Scheduler.IMessage))
  name.vb: Do(Func(Of IMessage, IMessage))
  spec.csharp:
  - uid: Scheduler.ISchedulerFactory.Do(System.Func{Scheduler.IMessage,Scheduler.IMessage})
    name: Do
    nameWithType: ISchedulerFactory.Do
    fullName: Scheduler.ISchedulerFactory.Do
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Scheduler.ISchedulerFactory.Do(System.Func{Scheduler.IMessage,Scheduler.IMessage})
    name: Do
    nameWithType: ISchedulerFactory.Do
    fullName: Scheduler.ISchedulerFactory.Do
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Scheduler.IMessage,Scheduler.IMessage}
  commentId: T:System.Func{Scheduler.IMessage,Scheduler.IMessage}
  parent: System
  definition: System.Func`2
  name: Func<IMessage, IMessage>
  nameWithType: Func<IMessage, IMessage>
  fullName: System.Func<Scheduler.IMessage, Scheduler.IMessage>
  nameWithType.vb: Func(Of IMessage, IMessage)
  fullName.vb: System.Func(Of Scheduler.IMessage, Scheduler.IMessage)
  name.vb: Func(Of IMessage, IMessage)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Scheduler.SchedulerFactory.Start*
  commentId: Overload:Scheduler.SchedulerFactory.Start
  name: Start
  nameWithType: SchedulerFactory.Start
  fullName: Scheduler.SchedulerFactory.Start
- uid: Scheduler.ISchedulerFactory.Start(Scheduler.IMessage)
  commentId: M:Scheduler.ISchedulerFactory.Start(Scheduler.IMessage)
  parent: Scheduler.ISchedulerFactory
  name: Start(IMessage)
  nameWithType: ISchedulerFactory.Start(IMessage)
  fullName: Scheduler.ISchedulerFactory.Start(Scheduler.IMessage)
  spec.csharp:
  - uid: Scheduler.ISchedulerFactory.Start(Scheduler.IMessage)
    name: Start
    nameWithType: ISchedulerFactory.Start
    fullName: Scheduler.ISchedulerFactory.Start
  - name: (
    nameWithType: (
    fullName: (
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Scheduler.ISchedulerFactory.Start(Scheduler.IMessage)
    name: Start
    nameWithType: ISchedulerFactory.Start
    fullName: Scheduler.ISchedulerFactory.Start
  - name: (
    nameWithType: (
    fullName: (
  - uid: Scheduler.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Scheduler.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Scheduler.IMessage
  commentId: T:Scheduler.IMessage
  parent: Scheduler
  name: IMessage
  nameWithType: IMessage
  fullName: Scheduler.IMessage
